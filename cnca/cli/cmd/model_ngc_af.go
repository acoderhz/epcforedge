// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2019 Intel Corporation

package cnca

// SubscribedEvent : The possible value is CHANGE_OF_DNAI - the AF requests to
// be notified when the UP path changes for the PDU isession.
type SubscribedEvent string

// Link is a string identifying the referenced resource URI
// URI string formatted accordingding to IETF RFC 3986
type Link string

// SupportedFeatures string used to indicate the features supported by
// an API that is used (subclause 6.6 in 3GPP TS 29.500).
// The string shall contain a bitmask indicating supported features in
// hexadecimal representation.
// Each character in the string shall take a value of "0" to "9" or "A" to "F"
// and shall represent the support of 4 features as described in table 5.2.2-3.
// The most significant character representing the highest-numbered features
// shall appear first in the string,
// and the character representing features 1 to 4 shall appear last
// in the string.
// The list of features and their numbering (starting with 1)
// are defined separately for each API.
// Possible features for traffic influencing are
// Notification_websocket( takes vlue of 1) and
// Notification_test_event(takes value of 2)
// pattern: '^[A-Fa-f0-9]*$'
type SupportedFeatures string

// GPSI type
type GPSI string

// SrcUEIPv4Addr type
type SrcUEIPv4Addr string

// SrcUEIPv6Prefix type
type SrcUEIPv6Prefix string

// TgtUEIPv4Addr type
type TgtUEIPv4Addr string

// TgtUEIPv6Prefix type
type TgtUEIPv6Prefix string

// UEMac type
type UEMac string

// MacAddr type
type MacAddr string

// IPv4Addr type
type IPv4Addr string

// IPv6Addr type
type IPv6Addr string

// DNAI type
type DNAI string

// List of SubscribedEvent
const (
	//UP_PATH_CHANGE SubscribedEvent = "UP_PATH_CHANGE" >> causing lint error
	UPPathChange SubscribedEvent = "UP_PATH_CHANGE"
)

// DNAIChangeType type
type DNAIChangeType string

// List of DnaiChangeType
const (
	Early     DNAIChangeType = "EARLY"
	EarlyLate DNAIChangeType = "EARLY_LATE"
	Late      DNAIChangeType = "LATE"
)

// TrafficInfluSub is Traffic Influence Subscription structure
type TrafficInfluSub struct {
	// Identifies a service on behalf of which the AF is issuing the request.
	AFServiceID string `json:"afServiceId,omitempty"`
	// Identifies an application.
	AFAppID string `json:"afAppId,omitempty"`
	// Identifies an NEF Northbound interface transaction, generated by the AF.
	AFTransID string `json:"afTransId,omitempty"`
	// Identifies data network name
	DNN string `json:"dnn,omitempty"`
	// Network slice identifier
	SNSSAI SNSSAI `json:"snssai,omitempty"` //p
	// string containing a local identifier followed by \"@\" and
	// a domain identifier.
	// Both the local identifier and the domain identifier shall be encoded as
	// strings that do not contain any \"@\" characters.
	// See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information.
	ExternalGroupID string `json:"externalGroupId,omitempty"`
	// Identifies the requirement to be notified of the event(s).
	SubscribedEvents []SubscribedEvent `json:"subscribedEvents,omitempty"`
	//Generic Public Servie Identifiers asssociated wit the UE
	GPSI GPSI `json:"gpsi,omitempty"`
	// string identifying a Ipv4 address formatted in the \"dotted decimal\"
	//notation as defined in IETF RFC 1166.
	IPv4Addr IPv4Addr `json:"ipv4Addr,omitempty"`
	// string identifying a Ipv6 address formatted according to clause 4
	// in IETF RFC 5952.
	IPv6Addr IPv6Addr `json:"ipv6Addr,omitempty"`
	// string identifying mac address of UE
	MacAddr MacAddr `json:"macAddr,omitempty"`
	// Identifies the type of notification regarding UP path management event.
	// Possible values are:
	// EARLY - early notification of UP path reconfiguration.
	// EARLY_LATE - early and late notification of UP path reconfiguration.
	// This value shall only be present in the subscription to the
	// DNAI change event.
	// LATE - late notification of UP path reconfiguration.
	DNAIChgType DNAIChangeType `json:"dnaiChgType,omitempty"`
	// URL where notifications shall be sent
	NotificationDestination Link `json:"notificationDestination,omitempty"`
	// URL of created subscription resource
	Self Link `json:"self,omitempty"`
	// Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`
	// Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	// Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`
	// Settings for temporary validity of the subscription
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	// Identifies a geographic zone that the AF request applies only to the
	// traffic of UE(s) located in this specific zone.
	ValidGeoZoneIDs []string `json:"validGeoZoneIds,omitempty"`
	// String identifying supported features per Traffic Influence service
	SuppFeat SupportedFeatures `json:"suppFeat,omitempty"`
	// Configuration used for sending notifications though web sockets
	WebsockNotifConfig WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// Set to true by the AF to request the NEF to send a test notification.
	//Set to false or omitted otherwise.
	RequestTestNotification bool `json:"requestTestNotification,omitempty"`
	// Identifies whether an application can be relocated once a location of
	// the application has been selected.
	AppReloInd bool `json:"appReloInd,omitempty"`
	// Identifies whether the AF request applies to any UE.
	AnyUEInd bool `json:"anyUeInd,omitempty"`
}

// TrafficInfluSubPatch Traffic Influence Subscription Patch structure
type TrafficInfluSubPatch struct {
	// Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`
	// Identifies whether an application can be relocated once a location of
	// the application has been selected.
	AppReloInd bool `json:"appReloInd,omitempty"`
	// Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	// Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`
	// Settings for temporary validity of the subscription
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	// Identifies a geographic zone that the AF request applies only to the
	// traffic of UE(s) located in this specific zone.
	ValidGeoZoneIDs []string `json:"validGeoZoneIds,omitempty"`
}

// TemporalValidity Indicates the time interval(s) during which the AF request
// is to be applied
type TemporalValidity struct {
	// string with format \"date-time\" as defined in OpenAPI.
	StartTime string `json:"startTime,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	StopTime string `json:"stopTime,omitempty"`
}

// EthFlowDescription Identifies an Ethernet flow
type EthFlowDescription struct {
	DestMacAddr string `json:"destMacAddr,omitempty"`
	//EtherType number
	EthType string `json:"ethType"`
	// Defines a packet filter of an IP flow.
	FDesc string `json:"fDesc,omitempty"`
	// Possible values are DOWNLINK - The corresponding filter applies for
	// traffic to the UE.
	// UPLINK - The corresponding filter applies for traffic from the UE.
	// BIDIRECTIONAL The corresponding filter applies for traffic both to and
	// from the UE.
	// UNSPECIFIED - The corresponding filter applies for traffic to the UE
	// (downlink), but has no specific direction declared.
	// The service data flow detection shall apply the filter for uplink traffic
	// as if the filter was bidirectional.
	FDir string `json:"fDir,omitempty"`
	// Source mac address
	SourceMacAddr string `json:"sourceMacAddr,omitempty"`
	// Vlan tags
	VLANTags []string `json:"vlanTags,omitempty"`
}

// WebsockNotifConfig Websocket noticcation configuration
type WebsockNotifConfig struct {
	// string formatted according to IETF RFC 3986 identifying a
	// referenced resource.
	WebsocketURI string `json:"websocketUri,omitempty"`
	// Set by the AF to indicate that the Websocket delivery is requested.
	RequestWebsocketURI bool `json:"requestWebsocketUri,omitempty"`
}

// SNSSAI Network slice identifier
type SNSSAI struct {
	SST int32  `json:"sst"`
	SD  string `json:"sd,omitempty"`
}

// RouteToLocation Route to location structure
type RouteToLocation struct {
	// Data network access identifier
	DNAI DNAI `json:"dnai"`
	// Dnai route profile identifier
	RouteProfID string `json:"routeProfId,omitempty"`
	// Additional route information about the route to Dnai
	RouteInfo RouteInformation `json:"routeInfo,omitempty"`
}

// RouteInformation Route information struct
type RouteInformation struct {
	// string identifying a Ipv4 address formatted in the \"dotted decimal\"
	// notation as defined in IETF RFC 1166.
	IPv4Addr IPv4Addr `json:"ipv4Addr,omitempty"`
	// string identifying a Ipv6 address formatted according to clause 4 in
	// IETF RFC 5952.
	// The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall
	// not be used.
	IPv6Addr IPv6Addr `json:"ipv6Addr,omitempty"`
	// Port number
	PortNumber int32 `json:"portNumber"`
}

// ProblemDetails Problem details struct
type ProblemDetails struct {
	// problem type
	Type Link `json:"type,omitempty"`
	// A short, human-readable summary of the problem type.
	// It should not change from occurrence to occurrence of the problem.
	Title string `json:"title,omitempty"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail,omitempty"`
	// URL to problem instance
	Instance Link `json:"instance,omitempty"`
	// A machine-readable application error cause specific to this occurrence
	// of the problem.
	// This IE should be present and provide application-related error
	// information, if available.
	Cause string `json:"cause,omitempty"`
	// Description of invalid parameters, for a request rejected due to
	// invalid parameters.
	InvalidParams []InvalidParam `json:"invalidParams,omitempty"`
	// The HTTP status code for this occurrence of the problem.
	Status int `json:"status,omitempty"`
}

// InvalidParam Invalid Parameters struct
type InvalidParam struct {
	// Attribute''s name encoded as a JSON Pointer, or header''s name.
	Param string `json:"param"`
	// A human-readable reason, e.g. \"must be a positive integer\".
	Reason string `json:"reason,omitempty"`
}

// FlowInfo Flow information struct
type FlowInfo struct {
	// Indicates the packet filters of the IP flow. Refer to subclause 5.3.8 of
	//3GPP TS 29.214 for encoding.
	// It shall contain UL and/or DL IP flow description.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`
	// Indicates the IP flow.
	FlowID int32 `json:"flowId"`
}

// EventNotification structure
type EventNotification struct {
	// AfTransID
	AFTransID string `json:"afTransId,omitempty"`
	// DnaiChgType
	DNAIChgType DNAIChangeType `json:"dnaiChgType,omitempty"`
	// SourceTrafficRoute
	SourceTrafficRoute RouteToLocation `json:"sourceTrafficRoute,omitempty"`
	// SubscribedEvent
	SubscribedEvent SubscribedEvent `json:"subscribedEvent,omitempty"`
	// TargetTrafficRoute
	TargetTrafficRoute RouteToLocation `json:"targetTrafficRoute,omitempty"`
	// Gpsi
	GPSI string `json:"gpsi,omitempty"`
	// SrcUeIpv4Addr
	SrcUEIPv4Addr SrcUEIPv4Addr `json:"srcUeIpv4Addr,omitempty"`
	// SrcUeIpv6Prefix
	SrcUEIPv6Prefix SrcUEIPv6Prefix `json:"srcUeIpv6Prefix,omitempty"`
	// TgtUeIpv4Addr
	TgtUEIP4Addr TgtUEIPv4Addr `json:"tgtUeIpv4Addr,omitempty"`
	// TgtUeIpv6Prefix
	TgtUEIPv6Prefix TgtUEIPv6Prefix `json:"tgtUeIpv6Prefix,omitempty"`
	// UeMac
	UEMac UEMac `json:"ueMac,omitempty"`
}

// DurationSec is unsigned integer identifying a period of time in units of
// seconds.
type DurationSec uint64

// DurationSecRm is unsigned integer identifying a period of time in units of
// seconds with "nullable=true" property.
type DurationSecRm DurationSec

// DurationSecRo is unsigned integer identifying a period of time in units of
// seconds with "readOnly=true" property.
type DurationSecRo DurationSec

// Pfd is the structure of Packet Flow Description for an external Application
// Identifier
type Pfd struct {
	// Identifies a PDF of an application identifier.
	PfdID string `json:"pfdID"`
	// Represents a 3-tuple with protocol, server ip and server port for UL/DL
	// application traffic. The content of the string has the same encoding as
	// the IPFilterRule AVP value as defined in IETFÂ RFCÂ 6733.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`
	// Indicates a URL or a regular expression which is used to match the
	// significant parts of the URL.
	Urls []string `json:"urls,omitempty"`
	// Indicates an FQDN or a regular expression as a domain name matching
	// criteria.
	DomainNames []string `json:"domainNames,omitempty"`
}

// PfdData is the type that represents a PFD request to add, update or remove
// PFD(s) for one external application identifier provided by AF
type PfdData struct {
	// Each element uniquely identifies external application identifier
	ExternalAppID string `json:"externalAppID"`
	// Link to the resource. This parameter shall be supplied by the AF in
	// HTTP responses that include an object of PfdData type
	Self Link `json:"self,omitempty"`
	// Contains the PFDs of the external application identifier. Each PFD is
	// identified in the map via a key containing the PFD identifier.
	Pfds map[string]Pfd `json:"pfds"`
	// Indicates that the list of PFDs in this request should be deployed
	// within the time interval indicated by the Allowed Delay
	AllowedDelay *DurationSecRm `json:"allowedDelay,omitempty"`
	// SCEF supplied property, inclusion of this property means the allowed
	// delayed cannot be satisfied, i.e. it is smaller than the caching time,
	// but the PFD data is still stored.
	CachingTime *DurationSecRo `json:"cachingTime,omitempty"`
}

// PfdManagement resource for a PFD management request
type PfdManagement struct {
	// Link to the resource "Individual PFD Management Transaction".
	// This parameter shall be supplied by the AF in HTTP responses.
	Self Link `json:"self,omitempty"`
	// String identifying supported optional features of PFD Management
	// This attribute shall be provided in the POST request and in the
	// response of successful resource creation.
	SuppFeat *SupportedFeatures `json:"suppFeat,omitempty"`
	// Each element uniquely identifies the PFDs for an external application
	// identifier. Each element is identified in the map via an external
	// application identifier as key. The response shall include successfully
	// provisioned PFD data of application(s).
	PfdDatas map[string]PfdData `json:"pfdDatas"`
	// Supplied by the AF and contains the external application identifiers
	// for which PFD(s) are not added or modified successfully. The failure
	// reason is also included. Each element provides the related information
	// for one or more external application identifier(s) and is identified in
	// the map via the failure identifier as key.
	PfdReports map[string]PfdReport `json:"pfdReports,omitempty"`
}

// FailureCode represents the failure reason of the PFD management
type FailureCode string

// Possible values of FailureCode
const (
	// This value indicates that something functions wrongly in PFD
	// provisioning or the PFD provisioning does not function at all.
	Malfunction FailureCode = "MALFUNCTION"
	// This value indicates there is resource limitation for PFD storage.
	ResourceLimitation = "RESOURCE_LIMITATION"
	// This value indicates that the allowed delay is too short and PFD(s) are
	// not stored
	ShortDelay = "SHORT_DELAY"
	// The received external application identifier(s) are already provisioned
	AppIDDuplicated = "APP_ID_DUPLICATED"
	// Other reason specified
	OtherReason = "OTHER_REASON"
)

// PfdReport is the type that represents a PFD report to indicate the
// external application identifier(s) which PFD(s) are not added or
// modified successfully and corresponding failure reason.
type PfdReport struct {
	// Identifies the external application identifier(s) which PFD(s) are not
	// added or modified successfully
	ExternalAppIds []string `json:"externalAppIds"`
	// Identifies the failure reason
	FailureCode FailureCode `json:"failureCode"`
	// It shall be included when the allowed delayed cannot be satisfied, i.e.
	// it is smaller than the caching time configured in fetching PFD.
	CachingTime *DurationSec `json:"cachingTime,omitempty"`
}

// AccessType the model 'AccessType'
type AccessType string

// List of AccessType
const (
	AccessType3Gpp    AccessType = "3GPP_ACCESS"
	AccessTypeNon3Gpp AccessType = "NON_3GPP_ACCESS"
)

// Event type
type Event string

// list of Event
const (
	AccessTypeChange          Event = "ACCESS_TYPE_CHANGE"
	FailedResourcesAllocation Event = "FAILED_RESOURCES_ALLOCATION"
	PlmnChg                   Event = "PLMN_CHG"
	QosNotif                  Event = "QOS_NOTIF"
	ResourceAllocated         Event = "SUCCESSFUL_RESOURCES_ALLOCATION"
	UsageReport               Event = "USAGE_REPORT"
)

// NotifMethod type
type NotifMethod string

// List of NotifMethod
const (
	EventDetection NotifMethod = "EVENT_DETECTION"
	OneTime        NotifMethod = "ONE_TIME"
)

// AnGwAddress type
/*
 *AnGwAddress describes the address of the access network gateway control node
 * It can be an Ipv4 or Ipv6 Address
 */
type AnGwAddress string

// FlowDirection type
/*
 * FlowDirection Possible values are -
 * -DOWNLINK: The corresponding filter applies for traffic to the UE.
 * -UPLINK: The corresponding filter applies for traffic from the UE.
 * -BIDIRECTIONAL: The corresponding filter applies for traffic both to and from
 *    the UE.
 * -UNSPECIFIED: The corresponding filter applies for traffic to the UE
 *   (downlink), but has no specific direction declared. The service data flow
 *   detection shall apply the filter for uplink traffic as if the filter was
 *   bidirectional.
 * The PCF shall not use the value UNSPECIFIED in filters created by the network
 * in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED
 * in filters in UE-initiated procedures if the same value is received from the
 * SMF.
 */
type FlowDirection string

// List of FlowDirection
const (
	DLFlow           FlowDirection = "DOWNLINK"
	ULFlow           FlowDirection = "UPLINK"
	BiDirectionFlow  FlowDirection = "BIDIRECTIONAL"
	FlowNotSpecified FlowDirection = "UNSPECIFIED"
)

// FlowStatus type
type FlowStatus string

// list of FlowStatus
const (
	ULFlowEnabled FlowStatus = "ENABLED-UPLINK"
	DLFlowEnabled FlowStatus = "ENABLED-DOWNLINK"
	FlowEnabled   FlowStatus = "ENABLED"
	FlowDisabled  FlowStatus = "DISABLED"
	FlowRemoved   FlowStatus = "REMOVED"
)

// FlowUsage type
type FlowUsage string

// List of FlowUsage
const (
	FlowUsageNotSpecified FlowUsage = "NO_INFO"
	RTCPFlow              FlowUsage = "RTCP"
)

// MediaComponentResourcesStatus type
type MediaComponentResourcesStatus string

// list of MediaComponentResourceStatus
const (
	MediaComponentResourceActive   MediaComponentResourcesStatus = "ACTIVE"
	MediaComponentResourceInActive MediaComponentResourcesStatus = "INACTIVE"
)

// MediaType type
type MediaType string

// list of MediaType
const (
	MediaTypeAudio       MediaType = "AUDIO"
	MediaTypeVideo       MediaType = "VIDEO"
	MediaTypeData        MediaType = "DATA"
	MediaTypeApplication MediaType = "APPLICATION"
	MediaTypeControl     MediaType = "CONTROL"
	MediaTypeText        MediaType = "TEXT"
	MediaTypeMessage     MediaType = "MESSAGE"
	MediaTypeMisc        MediaType = "OTHER"
)

// PresenceState type
type PresenceState string

// List of PresenceState
const (
	PresenceStateInArea    PresenceState = "IN_AREA"
	PresenceStateOutOfArea PresenceState = "OUT_OF_AREA"
	PresenceStateUnknown   PresenceState = "UNKNOWN"
	PresenceStateInactive  PresenceState = "INACTIVE"
)

// QosNotifType model
type QosNotifType string

// List of QosNotifType
const (
	QosNotifGuaranteed    QosNotifType = "GUARANTEED"
	QosNotifNotGuaranteed QosNotifType = "NOT_GUARANTEED"
)

// RatType type
type RatType string

// List of RatType
const (
	RatTypeNR      RatType = "NR"
	RatTypeEUTRA   RatType = "EUTRA"
	RatTypeWLAN    RatType = "WLAN"
	RatTypeVIRTUAL RatType = "VIRTUAL"
)

// ReservPriority type
type ReservPriority string

// list of ReservPriority
const (
	ReservPriority1  ReservPriority = "PRIO_1"
	ReservPriority2  ReservPriority = "PRIO_2"
	ReservPriority3  ReservPriority = "PRIO_3"
	ReservPriority4  ReservPriority = "PRIO_4"
	ReservPriority5  ReservPriority = "PRIO_5"
	ReservPriority6  ReservPriority = "PRIO_6"
	ReservPriority7  ReservPriority = "PRIO_7"
	ReservPriority8  ReservPriority = "PRIO_8"
	ReservPriority9  ReservPriority = "PRIO_9"
	ReservPriority10 ReservPriority = "PRIO_10"
	ReservPriority11 ReservPriority = "PRIO_11"
	ReservPriority12 ReservPriority = "PRIO_12"
	ReservPriority13 ReservPriority = "PRIO_13"
	ReservPriority14 ReservPriority = "PRIO_14"
	ReservPriority15 ReservPriority = "PRIO_15"
	ReservPriority16 ReservPriority = "PRIO_16"
)

// ServAuthInfo type
type ServAuthInfo string

// List of ServAuthInfos
const (
	ServAuthNotKnown    ServAuthInfo = "TP_NOT_KNOWN"
	ServAuthExpired     ServAuthInfo = "TP_EXPIRED"
	ServAuthNotOccurred ServAuthInfo = "TP_NOT_YET_OCCURRED"
)

// SponsoringStatus type
type SponsoringStatus string

// List of SponsoringStatus
const (
	SponsorEnabled  SponsoringStatus = "SPONSOR_ENABLED"
	SponsorDisabled SponsoringStatus = "SPONSOR_DISABLED"
)

// TerminationCause type
type TerminationCause string

// List of TerminationCause
const (
	AllSDFDeactivated    TerminationCause = "ALL_SDF_DEACTIVATION"
	PDUSessionTerminated TerminationCause = "PDU_SESSION_TERMINATION"
)

// AccumulatedUsage struct
type AccumulatedUsage struct {
	// Unsigned integer identifying a period of time in units of seconds.
	Duration int32 `json:"duration,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	TotalVolume int64 `json:"totalVolume,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	DownlinkVolume int64 `json:"downlinkVolume,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	UplinkVolume int64 `json:"uplinkVolume,omitempty"`
}

// PolicyEventNotification describes the event info delivered in the notification
type PolicyEventNotification struct {
	Event Event   `json:"event"`
	Flows []Flows `json:"flows,omitempty"`
}

// EventSubscription describes the event info delivered in the subscription
type EventSubscription struct {
	Event       Event       `json:"event"`
	NotifMethod NotifMethod `json:"notifMethod,omitempty"`
}

// RoutingRequirement describes the event info delivered in the subscription
type RoutingRequirement struct {
	AppReloc     bool               `json:"appReloc,omitempty"`
	RouteToLocs  []RouteToLocation  `json:"routeToLocs,omitempty"`
	SpVal        *SpatialValidity   `json:"spVal,omitempty"`
	TempVals     []TemporalValidity `json:"tempVals,omitempty"`
	UpPathChgSub *UpPathChgEvent    `json:"upPathChgSub,omitempty"`
}

// AppSessionContextReqData type
/*
 * AppSessionContextReqData Identifies the service requirements of an Individual
 * Application Session Context.
 */
type AppSessionContextReqData struct {
	AfAppID   string              `json:"afAppId,omitempty"`
	AfRoutReq *RoutingRequirement `json:"afRoutReq,omitempty"`
	// Contains an identity of an application service provider.
	AspID string `json:"aspId,omitempty"`
	/*
	 * string identifying a BDT Reference ID as defined in subclause
	 * 5.3.3 of 3GPP TS 29.154.
	 */
	BdtRefID      string                    `json:"bdtRefId,omitempty"`
	Dnn           string                    `json:"dnn,omitempty"`
	EvSubsc       *EventsSubscReqData       `json:"evSubsc,omitempty"`
	MedComponents map[string]MediaComponent `json:"medComponents,omitempty"`
	IPDomain      string                    `json:"ipDomain,omitempty"`
	// indication of MPS service request
	MpsID      string           `json:"mpsId,omitempty"`
	NotifURI   string           `json:"notifUri"`
	SliceInfo  *SNSSAI          `json:"sliceInfo,omitempty"`
	SponID     string           `json:"sponId,omitempty"`
	SponStatus SponsoringStatus `json:"sponStatus,omitempty"`
	Supi       string           `json:"supi,omitempty"`
	Gpsi       string           `json:"gpsi,omitempty"`
	/*
	 * A string used to indicate the features supported by an API that is
	 * used as defined in subclause 6.6 in 3GPP TS 29.500 [1]. The string
	 * shall contain a bitmask indicating supported features in hexadecimal
	 * representation. Each character in the string shall take a value of
	 * \"0\" to \"9\" or \"A\" to \"F\" and shall represent the support of 4
	 * features as described in table 5.2.2-3. The most significant
	 * character representing the highest-numbered features shall appear
	 * first in the string, and the character representing features 1 to 4
	 * shall appear last in the string. The list of features and their
	 * numbering (starting with 1) are defined separately for each API.
	 * Possible features for traffic influencing are
	 * Notification_websocket(1), Notification_test_event(2)
	 */
	SuppFeat string   `json:"suppFeat"`
	UeIpv4   IPv4Addr `json:"ueIpv4,omitempty"`
	UeIpv6   IPv6Addr `json:"ueIpv6,omitempty"`
	UeMac    MacAddr  `json:"ueMac,omitempty"`
}

// AppSessionContextRespData struct
/*
 * AppSessionContextRespData Describes the authorization data of an Individual
 * Application Session Context created by the PCF.
 */
type AppSessionContextRespData struct {
	ServAuthInfo ServAuthInfo `json:"servAuthInfo,omitempty"`
	/*
	 * A string used to indicate the features supported by an API that is
	 * used as defined in subclause 6.6 in 3GPP TS 29.500 [1]. The string
	 * shall contain a bitmask indicating supported features in hexadecimal
	 * representation. Each character in the string shall take a value of
	 * \"0\" to \"9\" or \"A\" to \"F\" and shall represent the support of 4
	 * features as described in table 5.2.2-3. The most significant
	 * character representing the highest-numbered features shall appear
	 * first in the string, and the character representing features 1 to 4
	 * shall appear last in the string. The list of features and their
	 * numbering (starting with 1) are defined separately for each API.
	 * Possible features for traffic influencing are
	 * Notification_websocket(1), Notification_test_event(2)
	 */
	SuppFeat string `json:"suppFeat,omitempty"`
}

// AppSessionContextUpdateData struct
/*
 * AppSessionContextUpdateData Identifies the modifications to an Individual
 * Application Session Context and may include the modifications to the
 * sub-resource Events Subscription.
 */
type AppSessionContextUpdateData struct {
	// Contains an AF application identifier.
	AfAppID   string              `json:"afAppId,omitempty"`
	AfRoutReq *RoutingRequirement `json:"afRoutReq,omitempty"`
	// Contains an identity of an application service provider.
	AspID string `json:"aspId,omitempty"`
	/*
	 * string identifying a BDT Reference ID as defined in subclause
	 * 5.3.3 of 3GPP TS 29.154.
	 */
	BdtRefID      string                    `json:"bdtRefId,omitempty"`
	EvSubsc       *EventsSubscReqData       `json:"evSubsc,omitempty"`
	MedComponents map[string]MediaComponent `json:"medComponents,omitempty"`
	// indication of MPS service request
	MpsID string `json:"mpsId,omitempty"`
	// Contains an identity of a sponsor.
	SponID     string           `json:"sponId,omitempty"`
	SponStatus SponsoringStatus `json:"sponStatus,omitempty"`
}

// AppSessionContext Represents an Individual Application Session Context resource.
type AppSessionContext struct {
	AscReqData  *AppSessionContextReqData  `json:"ascReqData,omitempty"`
	AscRespData *AppSessionContextRespData `json:"ascRespData,omitempty"`
	EvsNotif    *EventsNotification        `json:"evsNotif,omitempty"`
}

// Ecgi Struct
type Ecgi struct {
	PlmnID      PlmnID `json:"plmnId"`
	EutraCellID string `json:"eutraCellId"`
}

// EventsNotification describes the notification of a matched event
type EventsNotification struct {
	AccessType AccessType  `json:"accessType,omitempty"`
	AnGwAddr   AnGwAddress `json:"anGwAddr,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	EvSubsURI                 string                       `json:"evSubsUri"`
	EvNotifs                  []PolicyEventNotification    `json:"evNotifs"`
	FailedResourcAllocReports []ResourcesAllocationInfo    `json:"failedResourcAllocReports,omitempty"`
	PlmnID                    *PlmnID                      `json:"plmnId,omitempty"`
	QncReports                []QosNotificationControlInfo `json:"qncReports,omitempty"`
	RatType                   RatType                      `json:"ratType,omitempty"`
	UsgRep                    AccumulatedUsage             `json:"usgRep,omitempty"`
}

// EventsSubscReqData Identifies the events the application subscribes to.
type EventsSubscReqData struct {
	Events []EventSubscription `json:"events"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotifURI string          `json:"notifUri,omitempty"`
	UsgThres *UsageThreshold `json:"usgThres,omitempty"`
}

// Flows Identifies the flows
type Flows struct {
	ContVers []int32 `json:"contVers,omitempty"`
	FNums    []int32 `json:"fNums,omitempty"`
	MedCompN int32   `json:"medCompN"`
}

// GlobalRanNodeID struct for GlobalRanNodeId
type GlobalRanNodeID struct {
	PlmnID  *PlmnID `json:"plmnId"`
	N3IwfID string  `json:"n3IwfId,omitempty"`
	GnbID   *GnbID  `json:"gNbId,omitempty"`
	NgeNbID string  `json:"ngeNbId,omitempty"`
}

// GnbID struct
type GnbID struct {
	BitLength int32  `json:"bitLength"`
	GNBValue  string `json:"gNBValue"`
}

// MediaComponent Identifies a media component.
type MediaComponent struct {
	ContVer  int32 `json:"contVer,omitempty"`
	MedCompN int32 `json:"medCompN"`
	// Contains an AF application identifier.
	AfAppID   string              `json:"afAppId,omitempty"`
	AfRoutReq *RoutingRequirement `json:"afRoutReq,omitempty"`
	// Represents the content version of some content.
	Codecs      []string                     `json:"codecs,omitempty"`
	FStatus     FlowStatus                   `json:"fStatus,omitempty"`
	MarBwDl     string                       `json:"marBwDl,omitempty"`
	MarBwUl     string                       `json:"marBwUl,omitempty"`
	MedSubComps map[string]MediaSubComponent `json:"medSubComps,omitempty"`
	MedType     MediaType                    `json:"medType,omitempty"`
	MirBwDl     string                       `json:"mirBwDl,omitempty"`
	MirBwUl     string                       `json:"mirBwUl,omitempty"`
	ResPrio     ReservPriority               `json:"resPrio,omitempty"`
}

// MediaSubComponent Identifies a media subcomponent
type MediaSubComponent struct {
	EthfDescs []EthFlowDescription `json:"ethfDescs,omitempty"`
	FNum      int32                `json:"fNum"`
	FDescs    []string             `json:"fDescs,omitempty"`
	FStatus   FlowStatus           `json:"fStatus,omitempty"`
	MarBwDl   string               `json:"marBwDl,omitempty"`
	MarBwUl   string               `json:"marBwUl,omitempty"`
	/*
	 * 2-octet string, where each octet is encoded in hexadecimal
	 * representation. The first octet contains the IPv4 Type-of-Service or
	 * the IPv6 Traffic-Class field and the second octet contains the
	 * ToS/Traffic Class mask field.
	 */
	TosTrCl   string    `json:"tosTrCl,omitempty"`
	FlowUsage FlowUsage `json:"flowUsage,omitempty"`
}

// Ncgi struct
type Ncgi struct {
	PlmnID   PlmnID `json:"plmnId"`
	NrCellID string `json:"nrCellId"`
}

// PlmnID struct
type PlmnID struct {
	Mcc string `json:"mcc"`
	Mnc string `json:"mnc"`
}

// PresenceInfo  struct
type PresenceInfo struct {
	PraID               string            `json:"praId,omitempty"`
	PresenceState       PresenceState     `json:"presenceState,omitempty"`
	TrackingAreaList    []Tai             `json:"trackingAreaList,omitempty"`
	EcgiList            []Ecgi            `json:"ecgiList,omitempty"`
	NcgiList            []Ncgi            `json:"ncgiList,omitempty"`
	GlobalRanNodeIDList []GlobalRanNodeID `json:"globalRanNodeIdList,omitempty"`
}

// QosNotificationControlInfo struct
/*
 * QosNotificationControlInfo Indicates whether the QoS targets for a GRB flow
 * are not  guaranteed or guaranteed again
 */
type QosNotificationControlInfo struct {
	NotifType QosNotifType `json:"notifType"`
	Flows     []Flows      `json:"flows,omitempty"`
}

// ResourcesAllocationInfo struct
/*
 * ResourcesAllocationInfo describes the status of the PCC rule(s) related to
 * certain media components.
 */
type ResourcesAllocationInfo struct {
	McResourcStatus MediaComponentResourcesStatus `json:"mcResourcStatus"`
	Flows           []Flows                       `json:"flows,omitempty"`
}

// SpatialValidity describes explicitly the route to an Application location
type SpatialValidity struct {
	PresenceInfoList map[string]PresenceInfo `json:"presenceInfoList"`
}

// Tai Struct
type Tai struct {
	PlmnID PlmnID `json:"plmnId"`
	Tac    string `json:"tac"`
}

// TerminationInfo struct
/*
 * TerminationInfo indicates the cause for requesting the deletion of the
 * Individual Application Session Context resource
 */
type TerminationInfo struct {
	TermCause TerminationCause `json:"termCause"`
	// string providing an URI formatted according to IETF RFC 3986.
	ResURI string `json:"resUri"`
}

// UpPathChgEvent struct
type UpPathChgEvent struct {
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationURI string `json:"notificationUri"`
	/*
	 * It is used to set the value of Notification Correlation ID in the
	 * notification sent by the SMF.
	 */
	NotifCorreID string         `json:"notifCorreId"`
	DnaiChgType  DNAIChangeType `json:"dnaiChgType"`
}

// UsageThreshold struct
type UsageThreshold struct {
	// Unsigned integer identifying a period of time in units of seconds.
	Duration int32 `json:"duration,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	TotalVolume int64 `json:"totalVolume,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	DownlinkVolume int64 `json:"downlinkVolume,omitempty"`
	// Unsigned integer identifying a volume in units of bytes.
	UplinkVolume int64 `json:"uplinkVolume,omitempty"`
}
